// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//modal clientes
model Customer {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  phone   String
  email   String
  address String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  userId String? @db.ObjectId
  User User? @relation(fields: [userId], references: [id])

  tickets Ticket[]
}

//modal dos tickets
model Ticket {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  status        String
  created_at    DateTime? @default(now())
  updated_at    DateTime? @default(now())

  customerId String? @db.ObjectId
  customer Customer? @relation(fields: [customerId], references: [id])

  userId String? @db.ObjectId
  User User? @relation(fields: [userId], references: [id])
}

//modal da conta
model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String   
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])

}
 
 //model da sess√£o
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
}
 

 //model do usuario
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? 
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  tickets Ticket[]
  customers Customer[]

}
 
 //model do token
model VerificationToken {
  identifier String @id @default(auto()) @map("_id") @db.ObjectId
  token      String @unique
  expires    DateTime
 
  @@unique([identifier, token])
}
